{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Profitcar API",
    "description": "API documentation for front-end developing",
    "termsOfService": ""
  },
  "basePath": "/",
  "paths": {
    "/api/account": {
      "get": {
        "tags": [ "Account" ],
        "summary": "Action for checking if user already authenticated.",
        "description": "Returns check result.",
        "operationId": "Profitcar.Controllers.AccountController.Check",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/LoginResult" }
          }
        },
        "deprecated": false
      }
    },
    "/api/account/login": {
      "post": {
        "tags": [ "Account" ],
        "summary": "Action for login.",
        "description": "Returns login result.",
        "operationId": "Profitcar.Controllers.AccountController.Login",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Model for login.",
            "required": false,
            "schema": { "$ref": "#/definitions/LoginModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/LoginResult" }
          }
        },
        "deprecated": false
      }
    },
    "/api/account/logout": {
      "post": {
        "tags": [ "Account" ],
        "summary": "Action for logout.",
        "description": "Returns nothing.",
        "operationId": "Profitcar.Controllers.AccountController.Logout",
        "produces": [ ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/account/register": {
      "post": {
        "tags": [ "Account" ],
        "summary": "Action for registration.",
        "description": "Returns registration result.",
        "operationId": "Profitcar.Controllers.AccountController.Register",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Model for registration.",
            "required": false,
            "schema": { "$ref": "#/definitions/RegisterModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/RegisterResult" }
          }
        },
        "deprecated": false
      }
    },
    "/api/account/changepassword": {
      "put": {
        "tags": [ "Account" ],
        "summary": "Action for changing user's password.",
        "description": "Returns result of changing password.",
        "operationId": "Profitcar.Controllers.AccountController.ChangePassword",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Model for changing the password.",
            "required": false,
            "schema": { "$ref": "#/definitions/ChangePasswordModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ChangePasswordResult" }
          }
        },
        "deprecated": false
      }
    },
    "/api/account/settings": {
      "get": {
        "tags": [ "Account" ],
        "summary": "Action for retrieving settings.",
        "description": "Returns settings.",
        "operationId": "Profitcar.Controllers.AccountController.GetSettings",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SettingsModel" }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [ "Account" ],
        "summary": "Action for editing settings.",
        "description": "Returns settings after edit.",
        "operationId": "Profitcar.Controllers.AccountController.EditSettings",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Model for editing settings.",
            "required": false,
            "schema": { "$ref": "#/definitions/SettingsModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SettingsModel" }
          }
        },
        "deprecated": false
      }
    },
    "/api/account/avatar": {
      "put": {
        "tags": [ "Account" ],
        "summary": "Action for changing avatar image. Depends on FE realisation (flowjs/ng-flow).",
        "description": "Returns updated avatar.",
        "operationId": "Profitcar.Controllers.AccountController.EditAvatar",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/AvatarModel" }
          }
        },
        "deprecated": false
      }
    },
    "/api/offers": {
      "get": {
        "tags": [ "Offers" ],
        "summary": "Action for searching offers.",
        "description": "Returns offers.",
        "operationId": "Profitcar.Controllers.OffersController.Search",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "parameters",
            "in": "query",
            "description": "Parameters for searching.",
            "required": false,
            "schema": { "$ref": "#/definitions/SearchParametersModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/OffersModel" }
          }
        },
        "deprecated": false
      }
    },
    "/api/offers/full/{id}": {
      "get": {
        "tags": [ "Offers" ],
        "summary": "Action for retrieving full offer's info.",
        "description": "Returns full offer.",
        "operationId": "Profitcar.Controllers.OffersController.GetFullOffer",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer's identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/FullOfferModel" }
          }
        },
        "deprecated": false
      }
    },
    "/api/offers/my": {
      "get": {
        "tags": [ "Offers" ],
        "summary": "Action for retrieving collections of user's offers.",
        "description": "Returns user's offers.",
        "operationId": "Profitcar.Controllers.OffersController.GetMyOffers",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/OffersModel" }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [ "Offers" ],
        "summary": "Action for creating new offer.",
        "description": "Returns operation result.",
        "operationId": "Profitcar.Controllers.OffersController.Create",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Model that should be created.",
            "required": false,
            "schema": { "$ref": "#/definitions/ManageCarModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ManageCarResult" }
          }
        },
        "deprecated": false
      }
    },
    "/api/offers/my/{id}/{status}": {
      "put": {
        "tags": [ "Offers" ],
        "summary": "Action for changing offer's status. Currently affects only published(true)/unpublished(false).",
        "description": "Returns operation result.",
        "operationId": "Profitcar.Controllers.OffersController.ChangeOfferStatus",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer's identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status that should be set for offer.",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ChangeStatusResult" }
          }
        },
        "deprecated": false
      }
    },
    "/api/offers/my/{id}/vehicle": {
      "get": {
        "tags": [ "Offers" ],
        "summary": "Action for retrieving current vehicle model.",
        "description": "Returns model for editing.",
        "operationId": "Profitcar.Controllers.OffersController.GetVehicle",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer's identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ManageCarModel" }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [ "Offers" ],
        "summary": "Action for editing vehicle in offer.",
        "description": "Returns operation result.",
        "operationId": "Profitcar.Controllers.OffersController.EditVehicle",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer's identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "body",
            "description": "Updated model that should be applied.",
            "required": false,
            "schema": { "$ref": "#/definitions/ManageCarModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ManageCarResult" }
          }
        },
        "deprecated": false
      }
    },
    "/api/offers/my/{id}/offer": {
      "get": {
        "tags": [ "Offers" ],
        "summary": "Action for retrieving current offer model.",
        "description": "Returns model for editing.",
        "operationId": "Profitcar.Controllers.OffersController.GetOffer",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer's identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ManageOfferModel" }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [ "Offers" ],
        "summary": "Action for editing offer's parameters.",
        "description": "Returns operation result.",
        "operationId": "Profitcar.Controllers.OffersController.EditOffer",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer's identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "body",
            "description": "Updated model that should be applied.",
            "required": false,
            "schema": { "$ref": "#/definitions/ManageOfferModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ManageOfferResult" }
          }
        },
        "deprecated": false
      }
    },
    "/api/offers/my/{id}/calendar": {
      "get": {
        "tags": [ "Offers" ],
        "summary": "Action for retrieving current calendar model.",
        "description": "Returns model for editing.",
        "operationId": "Profitcar.Controllers.OffersController.GetCalendar",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer's identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ManageCalendarModel" }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [ "Offers" ],
        "summary": "Action for editing schedule and one-time offers.",
        "description": "Returns operation result.",
        "operationId": "Profitcar.Controllers.OffersController.EditCalendar",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer's identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "body",
            "description": "Updated model that should be applied.",
            "required": false,
            "schema": { "$ref": "#/definitions/ManageCalendarModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ManageCalendarResult" }
          }
        },
        "deprecated": false
      }
    },
    "/api/offers/my/{id}/photos": {
      "get": {
        "tags": [ "Offers" ],
        "summary": "Action for retrieving current photos model.",
        "description": "Returns model for editing.",
        "operationId": "Profitcar.Controllers.OffersController.GetPhotos",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer's identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ManagePhotosModel" }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [ "Offers" ],
        "summary": "Action for adding photos to offer. Depends on FE realisation (flowjs/ng-flow).",
        "description": "Returns operation result.",
        "operationId": "Profitcar.Controllers.OffersController.AddPhoto",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/AddPhotoResult" }
          }
        },
        "deprecated": false
      }
    },
    "/api/offers/my/{id}/photos/{photoId}": {
      "delete": {
        "tags": [ "Offers" ],
        "summary": "Action for deleting specified photo in offer.",
        "description": "Returns operation result.",
        "operationId": "Profitcar.Controllers.OffersController.DeletePhoto",
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer's identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "photoId",
            "in": "path",
            "description": "Photo's identifier in offer.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/DeletePhotoResult" }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "LoginResult": {
      "description": "Wrapper model for login result.",
      "type": "object",
      "properties": {
        "IsSuccessful": {
          "description": "True if succeeds, false if not.",
          "type": "boolean"
        },
        "Id": {
          "description": "User's id if authentication is successful, Null if not.",
          "type": "string"
        },
        "RegistrationStep": {
          "description": "Registration step where user have to be. Null if login failed.",
          "enum": [ "EmailConfirmation", "ProfileCreation", "Done" ],
          "type": "string"
        }
      }
    },
    "LoginModel": {
      "description": "Model for login.",
      "required": [ "Email", "Password" ],
      "type": "object",
      "properties": {
        "Email": {
          "description": "Email.",
          "type": "string"
        },
        "Password": {
          "description": "Password.",
          "maxLength": 100,
          "minLength": 6,
          "type": "string"
        }
      }
    },
    "RegisterModel": {
      "description": "Model for registration.",
      "required": [ "Email", "Password", "ConfirmPassword", "IsAgreed" ],
      "type": "object",
      "properties": {
        "Email": {
          "description": "Email.",
          "type": "string"
        },
        "Password": {
          "description": "Password.",
          "maxLength": 100,
          "minLength": 6,
          "type": "string"
        },
        "ConfirmPassword": {
          "description": "Password confirmation.",
          "maxLength": 100,
          "minLength": 6,
          "type": "string"
        },
        "IsAgreed": {
          "description": "True if agreed, false if not.",
          "type": "boolean"
        }
      }
    },
    "RegisterResult": {
      "description": "Wrapper model for registration result.",
      "type": "object",
      "properties": {
        "IsSuccessful": {
          "description": "True if succeeds, false if not.",
          "type": "boolean"
        },
        "Id": {
          "description": "User's id if register is successful, Null if not.",
          "type": "string"
        },
        "RegistrationStep": {
          "description": "Registration step where user have to be. Null if register failed.",
          "enum": [ "EmailConfirmation", "ProfileCreation", "Done" ],
          "type": "string"
        },
        "Errors": {
          "description": "Actual errors array.",
          "type": "array",
          "items": {
            "enum": [ "EmailInvalid", "EmailExists", "PasswordInvalid", "ConfirmPasswordInvalid", "AgreeRequired", "Unknown" ],
            "type": "string"
          }
        }
      }
    },
    "ChangePasswordModel": {
      "description": "Model for changing user's password.",
      "required": [ "OldPassword", "NewPassword", "ConfirmNewPassword" ],
      "type": "object",
      "properties": {
        "OldPassword": {
          "description": "Old password.",
          "maxLength": 100,
          "minLength": 6,
          "type": "string"
        },
        "NewPassword": {
          "description": "New password.",
          "maxLength": 100,
          "minLength": 6,
          "type": "string"
        },
        "ConfirmNewPassword": {
          "description": "Confirmation of new password.",
          "maxLength": 100,
          "minLength": 6,
          "type": "string"
        }
      }
    },
    "ChangePasswordResult": {
      "description": "Wrapper model for result of changing user's password.",
      "type": "object",
      "properties": {
        "IsSuccessful": {
          "description": "True if succeeds, false if not.",
          "type": "boolean"
        },
        "Errors": {
          "description": "Actual errors array.",
          "type": "array",
          "items": {
            "enum": [ "OldPasswordInvalid", "NewPasswordInvalid", "ConfirmPasswordInvalid", "Unknown" ],
            "type": "string"
          }
        }
      }
    },
    "SettingsModel": {
      "description": "Model for viewing and editing user settings.",
      "required": [ "Name", "Surname" ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "User's first name.",
          "type": "string"
        },
        "Surname": {
          "description": "User's last name.",
          "type": "string"
        },
        "IsMale": {
          "description": "True means male, false means female. Null means not set.",
          "type": "boolean"
        },
        "Birthday": {
          "format": "date-time",
          "description": "User's date of birth.",
          "type": "string"
        },
        "Email": {
          "description": "User's email. This field is readonly if user has already entered it.",
          "type": "string"
        },
        "Phone": {
          "description": "User's phone number.",
          "type": "string"
        },
        "Avatar": {
          "$ref": "#/definitions/AvatarModel",
          "description": "User's avatar."
        }
      }
    },
    "AvatarModel": {
      "description": "Model that describes avatar.",
      "type": "object",
      "properties": {
        "AbsolutePath": {
          "description": "Absolute URL to avatar image.",
          "type": "string"
        }
      }
    },
    "OffersModel": {
      "description": "Wrapper model for part of offers collection.",
      "type": "object",
      "properties": {
        "Location": {
          "$ref": "#/definitions/GeographyAddressModel",
          "description": "Location near which offers were searched."
        },
        "Entities": {
          "description": "Array that describes part of the collection. It always ordered by index even if there is no such field (it could be redundant).",
          "type": "array",
          "items": { "$ref": "#/definitions/OfferModel" }
        },
        "StartIndex": {
          "format": "int64",
          "description": "Start index of this part.",
          "type": "integer"
        },
        "EndIndex": {
          "format": "int64",
          "description": "End index of this part.",
          "type": "integer"
        },
        "HasAscendingOrder": {
          "description": "True if Entities is ordered ascending, false if descending.",
          "type": "boolean"
        },
        "IsFirst": {
          "description": "True if this is the first part, and no previous parts are available, false if not.",
          "type": "boolean"
        },
        "IsLast": {
          "description": "True if this is the last part, and no further parts are available, false if not.",
          "type": "boolean"
        },
        "CollectionCount": {
          "format": "int64",
          "description": "Count of elements in whole collection.",
          "type": "integer"
        }
      }
    },
    "GeographyAddressModel": {
      "description": "Model that represents address and point on earth.",
      "required": [ "Latitude", "Longitude" ],
      "type": "object",
      "properties": {
        "Country": {
          "description": "Country.",
          "type": "string"
        },
        "City": {
          "description": "City.",
          "type": "string"
        },
        "Address": {
          "description": "Full address.",
          "type": "string"
        },
        "Latitude": {
          "format": "double",
          "description": "Latitude.",
          "type": "number"
        },
        "Longitude": {
          "format": "double",
          "description": "Longitude.",
          "type": "number"
        }
      }
    },
    "OfferModel": {
      "description": "Model that describes offer for renting vehicle.",
      "type": "object",
      "properties": {
        "Id": {
          "description": "Offer's identifier.",
          "type": "string"
        },
        "Distance": {
          "format": "int32",
          "description": "Distance to vehicle from point of search.",
          "type": "integer"
        },
        "Price": {
          "format": "int32",
          "description": "Price for renting vehicle for 1 day.",
          "type": "integer"
        },
        "IsPublished": {
          "description": "True if published. False if not.",
          "type": "boolean"
        },
        "Location": {
          "$ref": "#/definitions/GeographyAddressModel",
          "description": "Geographical description for place where vehicle is located."
        },
        "Vehicle": {
          "$ref": "#/definitions/CarModel",
          "description": "Vehicle description."
        },
        "Owner": {
          "$ref": "#/definitions/UserThumbnailModel",
          "description": "Vehicle owner."
        },
        "Photo": {
          "description": "Absolute path to offer main photo.",
          "type": "string"
        }
      }
    },
    "CarModel": {
      "description": "Model that describes car.",
      "required": [ "Brand", "Model" ],
      "type": "object",
      "properties": {
        "Brand": {
          "description": "Car's brand name.",
          "type": "string"
        },
        "Model": {
          "description": "Car's model name.",
          "type": "string"
        },
        "Year": {
          "format": "int32",
          "description": "Car's year of production. null means not mentioned.",
          "type": "integer"
        },
        "Transmission": {
          "description": "Car's transmission. null means not mentioned.",
          "enum": [ "Automatic", "Mechanic" ],
          "type": "string"
        },
        "Fuel": {
          "description": "Car's fuel type. null means not mentioned.",
          "enum": [ "Petrol", "Diesel", "Electric", "Hybrid" ],
          "type": "string"
        },
        "Drive": {
          "description": "Car's drive type. null means not mentioned.",
          "enum": [ "Rear", "Front", "Full" ],
          "type": "string"
        },
        "SeatsCount": {
          "format": "int32",
          "description": "Number of available seats in Car. null means not mentioned.",
          "type": "integer"
        },
        "Consumption": {
          "format": "int32",
          "description": "Car's fuel consumption per 100km. null means not mentioned.",
          "type": "integer"
        }
      }
    },
    "UserThumbnailModel": {
      "description": "Model that describes minimal info about user.",
      "type": "object",
      "properties": {
        "Id": {
          "description": "User's identifier.",
          "type": "string"
        },
        "Name": {
          "description": "User's name.",
          "type": "string"
        },
        "Surname": {
          "description": "User's surname.",
          "type": "string"
        },
        "Rating": {
          "format": "int32",
          "description": "User's rating in percents.",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "Avatar": {
          "$ref": "#/definitions/AvatarModel",
          "description": "User's avatar."
        }
      }
    },
    "SearchParametersModel": {
      "description": "Model for searching offers.",
      "type": "object",
      "properties": {
        "Latitude": {
          "format": "double",
          "description": "Latitude of point near which to search. null means we have to try to locate current user.",
          "type": "number"
        },
        "Longitude": {
          "format": "double",
          "description": "Longitude of point near which to search. null means we have to try to locate current user.",
          "type": "number"
        },
        "PriceMin": {
          "format": "int32",
          "description": "Minimal price of offers. null means not mentioned.",
          "type": "integer"
        },
        "PriceMax": {
          "format": "int32",
          "description": "Maximal price of offers. null means not mentioned.",
          "type": "integer"
        },
        "Brand": {
          "description": "Car's brand name.",
          "type": "string"
        },
        "Model": {
          "description": "Car's model name.",
          "type": "string"
        },
        "Year": {
          "format": "int32",
          "description": "Car's year of production. null means not mentioned.",
          "type": "integer"
        },
        "Transmission": {
          "description": "Car's transmission. null means not mentioned.",
          "enum": [ "Automatic", "Mechanic" ],
          "type": "string"
        },
        "Fuel": {
          "description": "Car's fuel type. null means not mentioned.",
          "enum": [ "Petrol", "Diesel", "Electric", "Hybrid" ],
          "type": "string"
        },
        "Drive": {
          "description": "Car's drive type. null means not mentioned.",
          "enum": [ "Rear", "Front", "Full" ],
          "type": "string"
        },
        "SeatsCountMin": {
          "format": "int32",
          "description": "Minimal number of available seats in Car. null means not mentioned.",
          "type": "integer"
        },
        "SeatsCountMax": {
          "format": "int32",
          "description": "Maximal number of available seats in Car. null means not mentioned.",
          "type": "integer"
        },
        "ConsumptionMin": {
          "format": "int32",
          "description": "Car's fuel consumption minimal per 100km. null means not mentioned.",
          "type": "integer"
        },
        "ConsumptionMax": {
          "format": "int32",
          "description": "Car's fuel consumption maximal per 100km. null means not mentioned.",
          "type": "integer"
        },
        "VehicleAdditionalOptions": {
          "$ref": "#/definitions/VehicleAdditionalOptionsModel",
          "description": "Additional vehicle options to search."
        },
        "OfferAdditionalOptions": {
          "$ref": "#/definitions/OfferAdditionalOptionsModel",
          "description": "Additional offer options to search."
        }
      }
    },
    "VehicleAdditionalOptionsModel": {
      "description": "Model that describes additional options for vehicles.",
      "type": "object",
      "properties": {
        "IsGPS": {
          "description": "True means there is gps navigator in car, false means there is no gps navigator.",
          "type": "boolean"
        },
        "IsMusic": {
          "description": "True means there is music player in car, false means there is no music player.",
          "type": "boolean"
        },
        "IsBycicleHolder": {
          "description": "True means there is bycicle holder in car, false means there is no bycicle holder .",
          "type": "boolean"
        },
        "IsSkisHolder": {
          "description": "True means there is skis holder in car, false means there is no skis holder.",
          "type": "boolean"
        },
        "IsLuggageBox": {
          "description": "True means there is luggage box in car, false means there is no luggage box.",
          "type": "boolean"
        },
        "IsChildSeat": {
          "description": "True means there is child seat in car, false means there is no child seat.",
          "type": "boolean"
        },
        "IsConditioner": {
          "description": "True means there is conditioner in car, false means there is no conditioner.",
          "type": "boolean"
        }
      }
    },
    "OfferAdditionalOptionsModel": {
      "description": "Model that describes additional options for offers.",
      "type": "object",
      "properties": {
        "MinAge": {
          "format": "int32",
          "description": "Minimal age of driver that allowed to rent this car. null if onwer hasn't define it.",
          "type": "integer"
        },
        "IsSmoking": {
          "description": "True if smoking is allowed, false if not, null if onwer hasn't define it.",
          "type": "boolean"
        },
        "AllowedDistance": {
          "format": "int32",
          "description": "Maximal distance from renting point in km that allowed to travel. null if unlimited.",
          "type": "integer"
        },
        "Delivery": {
          "description": "Offered delivery. null if owner hasn't define it.",
          "enum": [ "No", "City", "Suburb" ],
          "type": "string"
        }
      }
    },
    "FullOfferModel": {
      "description": "Model that describes full offer for renting vehicle.",
      "type": "object",
      "properties": {
        "Calendar": {
          "$ref": "#/definitions/ManageCalendarModel",
          "description": "Calendar for this offer."
        },
        "AdditionalVehicleOptions": {
          "$ref": "#/definitions/VehicleAdditionalOptionsModel",
          "description": "Additional vehicle options."
        },
        "AdditionalOfferOptions": {
          "$ref": "#/definitions/OfferAdditionalOptionsModel",
          "description": "Additional offer's options."
        },
        "Photos": {
          "description": "Array of absolute pathes to photos.",
          "type": "array",
          "items": { "type": "string" }
        },
        "Id": {
          "description": "Offer's identifier.",
          "type": "string"
        },
        "Distance": {
          "format": "int32",
          "description": "Distance to vehicle from point of search.",
          "type": "integer"
        },
        "Price": {
          "format": "int32",
          "description": "Price for renting vehicle for 1 day.",
          "type": "integer"
        },
        "IsPublished": {
          "description": "True if published. False if not.",
          "type": "boolean"
        },
        "Location": {
          "$ref": "#/definitions/GeographyAddressModel",
          "description": "Geographical description for place where vehicle is located."
        },
        "Vehicle": {
          "$ref": "#/definitions/CarModel",
          "description": "Vehicle description."
        },
        "Owner": {
          "$ref": "#/definitions/UserThumbnailModel",
          "description": "Vehicle owner."
        },
        "Photo": {
          "description": "Absolute path to offer main photo.",
          "type": "string"
        }
      }
    },
    "ManageCalendarModel": {
      "description": "Model for managing calendar.",
      "type": "object",
      "properties": {
        "IsRegular": {
          "description": "True means this offer is available in selected days and hours every week. false means not.",
          "type": "boolean"
        },
        "Schedule": {
          "description": "Offer schedule. Starts from Monday (0). Length == 7 unless it is null.",
          "type": "array",
          "items": { "$ref": "#/definitions/WeekDayModel" }
        },
        "Periods": {
          "description": "Array of one-time offers.",
          "type": "array",
          "items": { "$ref": "#/definitions/OneTimeModel" }
        }
      }
    },
    "WeekDayModel": {
      "description": "Model that describes day of week in schedule.",
      "type": "object",
      "properties": {
        "IsIncluded": {
          "description": "True if in this day of week offer is available. False if not.",
          "type": "boolean"
        },
        "From": {
          "$ref": "#/definitions/DayTimeModel",
          "description": "Time from wich offer is available. null in Hours and Minutes means from start of the day."
        },
        "To": {
          "$ref": "#/definitions/DayTimeModel",
          "description": "Time till wich offer is available. null in Hours and Minutes means till end of the day."
        }
      }
    },
    "OneTimeModel": {
      "description": "Model that describes one-time offer.",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "Id of one-time offer. Unique inside general offer. Null is using to add new one-time offers.",
          "type": "integer"
        },
        "From": {
          "format": "date-time",
          "description": "Date and time from wich offer is available. null means from now unless OneTimeModel.To is null. Both null is using in order to delete one-time offer.",
          "type": "string"
        },
        "To": {
          "format": "date-time",
          "description": "Date and time till wich offer is available. null means forever unless OneTimeModel.From is null. Both null is using in order to delete one-time offer.",
          "type": "string"
        }
      }
    },
    "DayTimeModel": {
      "description": "Model that describes time in day.",
      "type": "object",
      "properties": {
        "Hours": {
          "format": "int32",
          "description": "Hours.",
          "type": "integer"
        },
        "Minutes": {
          "format": "int32",
          "description": "Minutes.",
          "type": "integer"
        }
      }
    },
    "ManageCarModel": {
      "description": "Model for managing car.",
      "required": [ "Brand", "Model" ],
      "type": "object",
      "properties": {
        "Cost": {
          "format": "int64",
          "description": "Cost of the car.",
          "type": "integer"
        },
        "AdditionalOptions": {
          "$ref": "#/definitions/VehicleAdditionalOptionsModel",
          "description": "Additional car options."
        },
        "Brand": {
          "description": "Car's brand name.",
          "type": "string"
        },
        "Model": {
          "description": "Car's model name.",
          "type": "string"
        },
        "Year": {
          "format": "int32",
          "description": "Car's year of production. null means not mentioned.",
          "type": "integer"
        },
        "Transmission": {
          "description": "Car's transmission. null means not mentioned.",
          "enum": [ "Automatic", "Mechanic" ],
          "type": "string"
        },
        "Fuel": {
          "description": "Car's fuel type. null means not mentioned.",
          "enum": [ "Petrol", "Diesel", "Electric", "Hybrid" ],
          "type": "string"
        },
        "Drive": {
          "description": "Car's drive type. null means not mentioned.",
          "enum": [ "Rear", "Front", "Full" ],
          "type": "string"
        },
        "SeatsCount": {
          "format": "int32",
          "description": "Number of available seats in Car. null means not mentioned.",
          "type": "integer"
        },
        "Consumption": {
          "format": "int32",
          "description": "Car's fuel consumption per 100km. null means not mentioned.",
          "type": "integer"
        }
      }
    },
    "ManageCarResult": {
      "description": "Wrapper model for managing car result.",
      "type": "object",
      "properties": {
        "IsSuccessful": {
          "description": "True if succeeds, false if not.",
          "type": "boolean"
        },
        "Id": {
          "description": "Offer's id if operation is successful, Null if not.",
          "type": "string"
        },
        "Errors": {
          "description": "Actual errors array.",
          "type": "array",
          "items": {
            "enum": [ "CarNotExists", "BrandRequired", "ModelRequired", "Unknown" ],
            "type": "string"
          }
        }
      }
    },
    "ChangeStatusResult": {
      "description": "Wrapper model for changing offer status result.",
      "type": "object",
      "properties": {
        "IsSuccessful": {
          "description": "True if succeeds, false if not.",
          "type": "boolean"
        },
        "Errors": {
          "description": "Actual errors array.",
          "type": "array",
          "items": {
            "enum": [ "OfferNotExists", "Unknown" ],
            "type": "string"
          }
        }
      }
    },
    "ManageOfferModel": {
      "description": "Model for managing offer.",
      "required": [ "Location" ],
      "type": "object",
      "properties": {
        "Location": {
          "$ref": "#/definitions/GeographyAddressModel",
          "description": "Location of offer."
        },
        "AdditionalOptions": {
          "$ref": "#/definitions/OfferAdditionalOptionsModel",
          "description": "Additional offer's options."
        },
        "Price": {
          "format": "int32",
          "description": "Renting price for one day. null if onwer hasn't define it. In case of editing with null default price will be set.",
          "type": "integer"
        },
        "DefaultPrice": {
          "format": "int32",
          "description": "Default price calculated by service.",
          "type": "integer"
        }
      }
    },
    "ManageOfferResult": {
      "description": "Wrapper model for managing offer result.",
      "type": "object",
      "properties": {
        "IsSuccessful": {
          "description": "True if succeeds, false if not.",
          "type": "boolean"
        },
        "Errors": {
          "description": "Actual errors array.",
          "type": "array",
          "items": {
            "enum": [ "OfferNotExists", "LocationRequired", "LocationInvalid", "Unknown" ],
            "type": "string"
          }
        }
      }
    },
    "ManageCalendarResult": {
      "description": "Wrapper model for managing calendar result.",
      "type": "object",
      "properties": {
        "IsSuccessful": {
          "description": "True if succeeds, false if not.",
          "type": "boolean"
        },
        "Errors": {
          "description": "Actual errors array.",
          "type": "array",
          "items": {
            "enum": [ "OfferNotExists", "Unknown" ],
            "type": "string"
          }
        }
      }
    },
    "ManagePhotosModel": {
      "description": "Model for managing offer's photos.",
      "type": "object",
      "properties": {
        "Photos": {
          "description": "Set of offer photos.",
          "type": "array",
          "items": { "$ref": "#/definitions/PhotoModel" }
        }
      }
    },
    "PhotoModel": {
      "description": "Model for offer photo.",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "Photo identifier. Unique inside one offer.",
          "type": "integer"
        },
        "AbsolutePath": {
          "description": "Absolute uri to the photo.",
          "type": "string"
        }
      }
    },
    "AddPhotoResult": {
      "description": "Wrapper model for adding photo result.",
      "type": "object",
      "properties": {
        "IsSuccessful": {
          "description": "True if succeeds, false if not.",
          "type": "boolean"
        },
        "Photo": {
          "$ref": "#/definitions/PhotoModel",
          "description": "Added photo. Null if not succeeded."
        },
        "Errors": {
          "description": "Actual errors array.",
          "type": "array",
          "items": {
            "enum": [ "OfferNotExists", "Unknown" ],
            "type": "string"
          }
        }
      }
    },
    "DeletePhotoResult": {
      "description": "Wrapper model for deleting photo result.",
      "type": "object",
      "properties": {
        "IsSuccessful": {
          "description": "True if succeeds, false if not.",
          "type": "boolean"
        },
        "Errors": {
          "description": "Actual errors array.",
          "type": "array",
          "items": {
            "enum": [ "OfferNotExists", "PhotoNotExists", "Unknown" ],
            "type": "string"
          }
        }
      }
    }
  },
  "securityDefinitions": { }
}
